---
import { Image } from 'astro:assets'
import keyDetailsImage from '../assets/images/how-it-works/key-details.png'
import selectParticipantsImage from '../assets/images/how-it-works/select-participants.png'
import splitBreakdown from '../assets/images/how-it-works/split-breakdown.png'
---

<section class='relative flex h-max w-full flex-col gap-16'>
  <div class='flex flex-col gap-8 px-6'>
    <h2 class='relative w-max max-w-[15ch] leading-[1.05] tracking-tight'>
      How it works

      <svg
        width='66'
        height='61'
        viewBox='0 0 66 61'
        fill='none'
        xmlns='http://www.w3.org/2000/svg'
        class='pointer-events-none absolute -right-[3.75rem] -top-[2.5rem] select-none'
      >
        <path
          d='M34.643 57.007c1.588-4.889 2.107-9.764.48-14.735-3.847-11.746-19.076-16.386-29.86-12.593'
          stroke='#846567'
          stroke-width='2.5'
          stroke-miterlimit='1.5'
          stroke-linecap='round'
          stroke-linejoin='round'
        >
        </path>
        <path
          d='M44.71 59.518c3.958-8.466 6.387-18.743 2.838-27.762C40.58 14.043 15.904 12.172 1.847 21.43'
          stroke='var(--logo-apricot)'
          stroke-width='2.5'
          stroke-miterlimit='1.5'
          stroke-linecap='round'
          stroke-linejoin='round'
        >
        </path>
        <path
          d='M57.891 57.12c6.792-13.371 8.898-26.953.581-40.005C55.908 13.09 50.676 8.47 46.59 6.223 32.98-1.256 15.01-.252 3 10.285'
          stroke='var(--logo-casal)'
          stroke-width='2.5'
          stroke-miterlimit='1.5'
          stroke-linecap='round'
          stroke-linejoin='round'
        >
        </path>
      </svg>
    </h2>

    <p class='text-[--text-light]'>
      Halver makes it simple to get reimbursed for group payments, whether
      they're one-time or recurring. These payments are referred to as
      'contributions' on a bill.
    </p>

    <p class='text-[--text-light]'>
      Creating a bill is an easy three-step process:
    </p>
  </div>

  <ol class='sr-only'>
    <li>
      <p>Add key bill details</p>
      <small>
        Specify how much, how often and how quickly you want to be paid
      </small>
    </li>
    <li>
      <p>Select participants on the bill</p>
      <small>Pick out who will be contributing from your contact list.</small>
    </li>
    <li>
      <p>Specify the split breakdown</p>
      <small>Enter the amount each participant is to contribute.</small>
    </li>
  </ol>

  <div aria-hidden id='list-container' class='flex flex-col gap-8 px-6'>
    <article id='list-item-1' class='item flex flex-col gap-6'>
      <div
        class='list-item-image-container mx-auto my-12 w-max py-20 opacity-0'
      >
        <Image
          src={keyDetailsImage}
          class='list-item-image max-w-[15rem]'
          id='list-item-image-1'
          alt='A group of friends watching subscription TV.'
          data-index='0'
        />
      </div>

      <div
        class='list-item-image-container mx-auto my-12 w-max py-20 opacity-0'
      >
        <Image
          src={selectParticipantsImage}
          class='list-item-image max-w-[15rem]'
          id='list-item-image-2'
          alt='A group of friends watching subscription TV.'
          data-index='1'
        />
      </div>

      <div
        class='list-item-image-container mx-auto my-12 w-max py-20 opacity-0'
      >
        <Image
          src={splitBreakdown}
          class='list-item-image max-w-[15rem]'
          id='list-item-image-3'
          alt='A group of friends watching subscription TV.'
          data-index='2'
        />
      </div>

      <div
        id='list-item-card-1'
        class='list-item-card sticky bottom-6 mt-auto rounded-lg bg-white/60 p-6 backdrop-blur-xl transition duration-700 ease-in-out dark:bg-white/5'
      >
        <span
          aria-hidden
          class='list-item-number relative mb-12 flex h-[3.125rem] w-[5.5625rem] items-center justify-center overflow-visible'
        >
          <span id='list-item-number-1' class='list-item-number'>1</span>

          <svg
            width='89'
            height='50'
            viewBox='0 0 89 50'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
            class='pointer-events-none absolute left-0 right-0 mx-auto w-20 select-none'
          >
            <path
              d='M68.21 7.595c-13.882-9.652-40.576-8.019-54.278.427C7.692 11.87-3.815 23.015 3.187 33.54c1.235 1.856 2.736 3.364 4.29 4.669 17.092 14.359 40.932 12.897 59.277 4.305 2.736-1.282 5.428-2.803 7.905-4.87 1.852-1.547 3.643-3.464 5.086-5.7 4.222-6.548 3.12-13.137-1.424-18.689-5.268-6.436-12.471-8.43-19.269-9.522-5.943-.956-11.88-1.139-17.851-.75C30 3.715 17.094 4.878 7.7 13.677 3.6 17.52-.809 25.732 2.708 32.38c3.81 7.203 12.796 9.535 18.84 11.055 16.304 4.1 42.101 2.068 56.952-8.693 1.602-1.16 3.224-2.241 4.657-3.767a27.292 27.292 0 0 0 3.156-4.068c6.663-10.544-8.206-17.174-13.45-18.313-16.495-3.581-40.91-8.75-56.101.778'
              stroke='#3D737D'
              id='list-number-highlight-1'
              stroke-width='2'
              stroke-miterlimit='1.5'
              stroke-linecap='round'
              stroke-linejoin='round'
              class='transition duration-700 ease-in-out'
            >
            </path>
          </svg>
        </span>

        <p
          id='list-item-heading-1'
          class='list-item-heading mb-3 font-semibold leading-[1.1] tracking-tight'
        >
          Add key bill details
        </p>
        <small
          id='list-item-subheading-1'
          class='list-item-subheading max-w-[27ch] leading-tight text-[--text-light]'
        >
          Specify how much, how often and how quickly you want to be paid
        </small>
      </div>
    </article>
  </div>
</section>

<script>
  import { enterView } from '../utils/enterView'

  interface Content {
    number: string
    heading: string
    subheading: string
    highlightClass: string
  }

  const contentMap: { [key: string]: Content } = {
    '0': {
      number: '1',
      heading: 'Add key bill details',
      subheading:
        'Specify how much, how often and how quickly you want to be paid.',
      highlightClass: 'stroke---button-casal]'
    },
    '1': {
      number: '2',
      heading: 'Select participants on the bill',
      subheading: 'Pick out who will be contributing from your contact list.',
      highlightClass: 'stroke-[--button-apricot]'
    },
    '2': {
      number: '3',
      heading: 'Specify the split breakdown',
      subheading: 'Enter the amount each participant is to contribute.',
      highlightClass: 'stroke-[--button-pharlap]'
    }
  }

  const indices = Object.keys(contentMap)

  const numberNode = document.getElementById('list-item-number-1')
  const numberHighlightNode = document.getElementById('list-number-highlight-1')
  const headingNode = document.getElementById('list-item-heading-1')
  const subheadingNode = document.getElementById('list-item-subheading-1')

  function updateText(index: string) {
    if (numberNode) numberNode.textContent = contentMap[index].number
    if (headingNode) headingNode.textContent = contentMap[index].heading
    if (subheadingNode)
      subheadingNode.textContent = contentMap[index].subheading
  }

  function updateHighlight(index: string, unselectedIndices: string[]) {
    if (numberHighlightNode && index) {
      numberHighlightNode.classList.add(contentMap[index].highlightClass)

      unselectedIndices.forEach((index) => {
        numberHighlightNode.classList.remove(contentMap[index].highlightClass)
      })
    }
  }

  enterView({
    selector: '.list-item-image',
    enter: function (el) {
      const index = el.dataset.index
      if (!index) return

      const unselectedIndices = indices.filter((i) => i !== index)

      updateText(index)
      updateHighlight(index, unselectedIndices)
    },
    exit: function (el) {
      const index = el.dataset.index
      if (!index) return

      const mountedIndexNumber = Number(index) - 1
      const mountedIndex =
        mountedIndexNumber < 0 ? '0' : String(mountedIndexNumber)

      const unselectedIndices = indices.filter((i) => i !== mountedIndex)

      updateText(mountedIndex)
      updateHighlight(mountedIndex, unselectedIndices)
    },
    progress: function (el, progress) {
      const scale = 1 + progress / 3
      el.style.transform = `scale(${scale})`

      if (el.parentElement) {
        el.parentElement.style.opacity = `${progress + 0.7}`
      }
    },
    offset: 0.3
  })
</script>

<style>
  h2 {
    font-size: var(--size-step-3);
  }

  p,
  small {
    text-wrap: balance;
  }

  .list-item-card {
    box-shadow: var(--shadow-elevation-low);
  }

  .list-item-number {
    font-size: var(--size-step-0);
  }

  .list-item-heading {
    font-size: var(--size-step-1);
  }

  .list-item-subheading {
    font-size: var(--size-step-0);
    font-weight: 450;
  }
</style>
